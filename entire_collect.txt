
#include <iostream>

int main( int argc, char* argv[])
{
    std::cout << "Hello World!" <<std::endl;
    return 0;
}

#include <iostream>

int main( int argc, char* argv[])
{
    std::cout << 10 << std::endl;
    std::cout << 10U << std::endl;
    std::cout << 10.5F << std::endl;
    std::cout << 10.5 << std::endl;
    std::cout << 3+4 <<std::endl;
    return 0;
}
 // 037 - CoutSample.cpp std::cout 사용법

#include <string>
#include <iostream>

int main(int argc, char* argv[])
{
    std::string strData = "Test string";
    std::cout << "Sample string" << std::endl;
    std::cout << strData << std::endl;

    strData = "New string";
    std::cout << strData << std::endl;

    std::cout <<"저는 " << 20 << "살" << "입니다." << std::endl;

    return 0;
}
// 038 - CoutString.cpp - 문자열 조합 출력

#include <string>
#include <cstdio>
#include <iostream>

int main(int argc, char* argv[])
{
    int nAge;
    std::cout << "나이를 입력하세요." << std::endl;
    std::cin >> nAge;

    char szJob[32];
    std::cout << "직업을 입력하세요." << std::endl;
    std::cin >> szJob;

    std::string strName;
    std::cout << "이름을 입력하세요." << std::endl;
    std::cin >> strName  ;

    std::cout << "당신의 이름은 " << strName << "이고, "
        << "나이는 " << nAge << "살이며, "
        << "직업은 " << szJob << "입니다." << std::endl;
     

    return 0;
}
// 039 - CinString.cpp - std::cin 사용법

#include <string>
#include <cstdio>
#include <iostream>

int main(int argc, char* argv[])
{ 
    int a = 10;
    int b(a);
    auto c(b);

    std::cout << a + b + c << std::endl;
    return 0;
}
// 042 - AutoSample.cpp - auto 예약어 사용

#include <iostream>

int main(int argc, char* argv[])
{
    int* pData = new int;
    int* pNewData = new int(10);

    *pData = 5;
    std::cout << *pData << std::endl;
    std::cout << *pNewData << std::endl;

    delete  pData;
    delete pNewData;

}
// 043 - NewDeleteSample.cpp - new 연산자 사용

#include <iostream>
using namespace std;

int main(int argc, char* argv[])
{
    int* arr = new int[5];

    for (int i = 0;i < 5;i++)
        arr[i] = (i + 1) * 10;

    for (int i = 0;i < 5;i++)
        cout << arr[i] << endl;

    delete[]    arr;
    return 0;
    
}
// 044 - NewDeleteArray.cpp - 배열 형태의 객체 생성
 

#include <iostream>
using namespace std;

int main(int argc, char* argv[])
{
    int nData = 10;
    
    int& ref = nData;
    ref = 20;
    cout << nData << endl;

    int* pnData = &nData;
    *pnData = 30;
    cout << nData << endl;

    return 0;
    
}
// 046 - ReferenceType.cpp - 참조형 변수 사용


#include <iostream>
using namespace std;

void TetstFunc(int& rParam) {
    rParam = 100;
}

int main(int argc, char* argv[])
{
    int nData = 0;
    TetstFunc(nData);
    cout << nData << endl;
    return 0; 
}
// 048 - CallByReference.cpp - 참조에 의한 호출


#include <iostream>
using namespace std;

void Swap(int& a, int& b) {
    int nTmp = a;
    a = b;
    b = nTmp;
}
int main(int argc, char* argv[])
{ 
    int x = 10, y = 20;
    Swap(x, y);

    cout << "x: " << x << endl;
    cout << "y: " << y << endl;
    return 0; 

}
// 049 - ReferenceSwap.cpp - 참조 전달


#include <iostream>
using namespace std;

int TestFunc(int nParam) {
    int nResult = nParam * 2;
    return nResult;
}

int main(int argc, char* argv[])
{ 
    int  nInput = 0;
    cout << "Input number: ";
    cin >> nInput;

    int&& rdata = nInput + 5;
    cout << rdata << endl;

    int&& result = TestFunc(10);

    result += 10;
    cout << result << endl;
    return 0; 

}
// 050- RvalueSample.cpp - r-value 참조


#include <iostream>
using namespace std;

int main(int argc, char* argv[])
{
	int aList[5] = { 10,20,30,40,50 };

	for (int i = 0;i < 5;++i)
		cout << aList[i] << ' ';
	cout << endl;

	for (auto n : aList)
		cout << n << ' ';

	cout << endl;

	for (auto& n : aList)
		cout << n << ' ';

	cout << endl;
	return 0;
}
// 052- RangeBasedfor.cpp - 범위 기반 for문


#include <iostream>
using namespace std;

int TestFunc(int nParam = 10) {
	return nParam;
}
int main(int argc, char* argv[])
{
	std::cout << TestFunc() << std::endl;
	std::cout << TestFunc(20) << std::endl;

	return 0;
}
// 057- DefaultParam.cpp - 디폴트 매개변수 사용


#include <iostream>
using namespace std;

int Add(int a, int b, int c) {
	std::cout << "Add(int, int, int): ";
	return a + b + c;
}

int Add(int a, int b ) {
	std::cout << "Add(int, int): ";
	return a + b ;
}
double Add(double a, double b ) {
	std::cout << "Add(double,double): ";
	return a + b ;
}
int main(int argc, char* argv[])
{
	std::cout << Add(3,4) << std::endl;
	std::cout << Add(3,4,5) << std::endl;
	std::cout << Add(3.3,4.4) << std::endl;

	return 0;
}
// 064 - FuncPoly.cpp - Add() 함수의 다중 정의


#include <iostream>
using namespace std;

void TestFunc(int a) {
	std::cout << "TestFunc(int)" << std::endl;
}

void TestFunc(int a,int b=10) {
	std::cout << "TestFunc(int,int)" << std::endl;
}
int main(int argc, char* argv[])
{
	TestFunc(5);

	return 0;
}
// 067 - FuncAmbiguity.cpp - 디폴트 매개변수와 다중 정의가 조합되었을때의 모호성 


#include <iostream>
using namespace std;

template<typename T>
T TestFunc(T a) {
	std::cout << "매개변수 a:" << a << std::endl;
	return a;
}
int main(int argc, char* argv[])
{
	std::cout << "int\t" << TestFunc(3) << std::endl;
	std::cout << "double\t" << TestFunc(3.3) << std::endl;
	std::cout << "char\t" << TestFunc('A') << std::endl;
	std::cout << "char*\t" << TestFunc("TestString") << std::endl;
}
// 069 - FuncTemplate1.cpp - 템플릿 함수 


#include <iostream>
using namespace std;

template<typename T>
T Add(T a,T b) {
	return a+b;
}
int main(int argc, char* argv[])
{
	std::cout << Add(3,4) << std::endl;
	std::cout << Add(3.3,4.4)  << std::endl;
}
// 070 - FuncTemplate2.cpp - 함수 템플릿으로 만든 Add() 함수


#include <iostream>

#define ADD(a,b)((a)+(b))

int Add(int a, int b) {
	return a + b;
}
inline int AddNew(int a, int b) {
	return a + b;
}
int main(int argc, char* argv[])
{
	int a, b;
	scanf_s("%d%d", &a, &b);

	printf("ADD(): %d\n", ADD(a, b));
	printf("Add(): %d\n", Add(a, b));
	printf("AddNew(): %d\n", AddNew(a, b));
	
	return 0;
}
// 072- InlineSample.cpp - 인라인 함수


#include <iostream>

namespace TEST {
	int g_nData = 100;
	void TesstFunc(void) {
		std::cout << "TEST::TestFunc()" << std::endl;
	}
}
int main(int argc, char* argv[])
{
	TEST::TesstFunc();
	std::cout << TEST::g_nData << std::endl;
	return 0;
}
// 075 - NamespaceSample.cpp - 네임스페이스 선언 및 정의


#include <iostream>

using namespace std;
namespace TEST {
	int g_nData = 100;
	void TestFunc(void) {
		cout << "TEST::TestFunc()" << endl;
	}
}
using namespace TEST;

int main(int argc, char* argv[])
{
	TestFunc();
	cout << g_nData << endl;
	return 0;
}
// 077 - NamespaceUsing.cpp - using 선언 


#include <iostream>

using namespace std;
namespace TEST {
	int g_nData = 100;
	namespace DEV {
		int g_nData = 200;
		namespace WIN{
			int g_nData = 300;

		}
	}
}

int main(int argc, char* argv[])
{
	cout << TEST::g_nData << endl;
	cout << TEST::DEV::g_nData << endl;
	cout << TEST::DEV::WIN::g_nData << endl;
	return 0;
}
// 080 - NamespaceNested.cpp - 네임스페이스의 중첩 


#include <iostream>
using namespace std;

void TestFunc(void) { cout << "::TestFunc()" << endl; }
namespace TEST {
	void TestFunc(void) {
		cout << "TEST::TestFunc()" << endl;
	}
}

namespace MYDATA {
	void TestFunc(void) {
		cout << "DATA::TestFunc()" << endl;
	}
}

int main(int argc, char* argv[])
{
	TestFunc();
	::TestFunc();
	TEST::TestFunc();
	MYDATA::TestFunc();

	return 0;
}
// 081 - NamespaceOver.cpp - 네임스페이스를 포함한 다중 정의 


#include <iostream>
using namespace std;

int nData(20);

 int main(int argc, char* argv[])
{
	 int nData(10);

	 cout << nData << endl;
	 cout << argc << endl;

	return 0;
}
// 085 - IdSearchSeq1.cpp - 식별자에 접근하는 코드가 속한 블록 범위


#include <iostream>
using namespace std;

 int main(int argc, char* argv[])
{
	 int nInput = 0;
	 cout << "11이상의 정수를 입력하세요" << endl;
	 cin >> nInput;

	 if (nInput > 10) {
		 cout << nInput << endl;
	 }
	 else
		 cout << "Error" << endl;
	 
	return 0;
}
// 086 - IdSearchSeq2.cpp - 범위 검색의 확장


#include <iostream>
using namespace std;

int nData = 200;

namespace TEST {
	int nData = 100;
	void TestFunc(void) {
		cout << nData << endl;
	}
}

 int main(int argc, char* argv[])
{
	 TEST::TestFunc();
	 
	return 0;
}
// 087 - IdSearchSeq3.cpp - 네임스페이스와 전역 변수의 검색 우선권


#include <iostream>
using namespace std;

int nData = 100;

namespace TEST {
	int nData = 200;
}

 int main(int argc, char* argv[])
{
	 cout << nData << endl;
	 
	return 0;
}
// 089 - IdSearchSeq4.cpp - using namespace 선언을 적용하기 전


#include <iostream>
using namespace std;

int nData = 100;

namespace TEST {
	int nData = 200;
}

using namespace TEST;

 int main(int argc, char* argv[])
{
	 cout << nData << endl;
	 
	return 0;
}
// 090 - IdSearchSeq5.cpp - TEST 네임스페이스에 using 선언 추가


#include <iostream>
class USERDATA {
public:
	int nAge;
	char szName[32];
	void Print(void) {
		printf("%d, %s\n", nAge, szName);
	}
};

int main(int argc, char* argv[]) {
	USERDATA user = { 10,"철수" };
	user.Print();
}
// 106 - HelloOOP.cpp - 클래스를 이용해 객체지향 프로그램으로 변경


#include <iostream>
using namespace std;
class CTest{
public:
	CTest() {
		m_nData = 10;
	}
	int m_nData;
	void PrintData(void){
		cout << m_nData << endl;
	}
};

int main(int argc, char* argv[]) {
	CTest t;
	t.PrintData();
}
// 108 - MemberInit1.cpp - 맴버 변수 초기화를 위한 생성자 함수 사용

#include <iostream>
using namespace std;
class CTest{
public:
	CTest() {
		cout << "CTest() : 생성자 함수" << endl;
		m_nData = 10;
	}
	int m_nData;
	void PrintData(void){
		cout << m_nData << endl;
	}
};

int main(int argc, char* argv[]) {
	cout << "_tmain() 함수 시작" << endl;
	CTest t;
	t.PrintData();

	cout << "_tmain() 함수 끝" << endl;
}
// 109 - MemberInit2.cpp - 생성자 함수의 역할


#include <iostream>
using namespace std;

class CTest{
public:
	CTest() {
		m_nData = 10;
	}
	int m_nData;
	void PrintData(void);
};

void CTest::PrintData(void)
{
	cout << m_nData << endl;
}

int main(int argc, char* argv[]) {
	CTest t;
	t.PrintData();

	return 0;
}
// 111 - MemberInit3.cpp - 맴버 함수 선언과 정의를 분리


